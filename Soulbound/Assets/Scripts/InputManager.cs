using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Controls;
using System;
using System.Collections;

[DefaultExecutionOrder(-110)]
public class InputManager : Singleton<InputManager>
{

    //======================================
    // PUBLIC PROPERTIES
    // (accessed by external scripts)
    //======================================

    [HideInInspector] public Vector2 moveInput;

    //=====================================================
    // STATE
    //=====================================================

    // Bool used to keep input in sync between Update() and FixedUpdate()
    private bool readyToClear;

    // Input actions wrapper (generated by Unity Input System Asset)
    public static InputMaster controls;

    //=====================================================
    // METHODS
    //=====================================================

    private void Awake()
    {
        controls = new InputMaster();

        controls.Player.Move.performed += ctx => moveInput = ctx.ReadValue<Vector2>();
        controls.Player.Move.canceled += ctx => moveInput = Vector2.zero;
    }

    public void Vibrate(float low, float high, float dur)
    {
        if (Gamepad.current != null) StartCoroutine(Vibration(low, high, dur));   
    }

    private IEnumerator Vibration(float lowFreq, float highFreq, float duration)
    {
        Gamepad.current.SetMotorSpeeds(0.123f, 0.25f);
        yield return new WaitForSeconds(0.5f);
        Gamepad.current.SetMotorSpeeds(0f, 0f);
    }

    private void OnEnable()
    {
        controls.Enable();
    }

    private void OnDisable()
    {
        controls.Disable();
    }

}
