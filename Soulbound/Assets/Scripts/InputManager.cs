using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Controls;

[DefaultExecutionOrder(-110)]
public class InputManager : MonoBehaviour
{
    public static InputManager Instance { get; private set; }

    //======================================
    // PUBLIC PROPERTIES
    // (accessed by external scripts)
    //======================================

    [HideInInspector] public Vector2 moveInput;

    [HideInInspector] public bool jumpPressed;

    [HideInInspector] public bool attackPressed;
    [HideInInspector] public bool throwPressed;

    [HideInInspector] public bool pauseButtonPressed;

    //=====================================================
    // STATE
    //=====================================================

    // Bool used to keep input in sync between Update() and FixedUpdate()
    private bool readyToClear;

    // Input actions wrapper (generated by Unity Input System Asset)
    private InputMaster inputMaster;

    //=====================================================
    // METHODS
    //=====================================================

    private void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        } else
        {
            Destroy(gameObject);
        }

        inputMaster = new InputMaster();

    }

    private void Update()
    {
        ClearInput();

        if (GameManager.Instance.IsGamePaused() == true) return;

        ProcessPlayerInput();
    }

    void FixedUpdate()
    {
        // Set a flag that lets inputs to be cleared out during the next Update().
        // This ensures that all code gets to use the current inputs.
        readyToClear = true;
    }


    private void ProcessPlayerInput()
    {
        moveInput += inputMaster.Player.Move.ReadValue<Vector2>();
        moveInput = new Vector2(Mathf.Clamp(moveInput.x, -1f, 1f), Mathf.Clamp(moveInput.y, -1f, 1f));

        // If the jump button was pressed this frame,
        // or was pressed in a previous frame, but was not yet cleared
        jumpPressed = jumpPressed || inputMaster.Player.Jump.triggered;

        attackPressed = attackPressed || inputMaster.Player.Attack.triggered;
        throwPressed = throwPressed || inputMaster.Player.Throw.triggered;

        pauseButtonPressed = pauseButtonPressed || inputMaster.Player.PauseGame.triggered;
    }


    // Clear input, if we are ready
    private void ClearInput()
    {
        // If we are not ready to clear input, exit
        if (!readyToClear) return;

        // Reset input
        moveInput = Vector2.zero;

        // Reset jump button
        jumpPressed = false;

        // Reset attack buttons
        attackPressed = false;
        throwPressed = false;

        // Reset game variables
        pauseButtonPressed = false;

        readyToClear = false;
    }


    private void OnEnable()
    {
        inputMaster.Enable();
    }

    private void OnDisable()
    {
        inputMaster.Disable();
    }

}
